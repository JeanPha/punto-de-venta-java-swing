package vista;

import conexion.Conexion;
import controlador.Ctrl_Producto;
import controlador.Ctrl_funciones;
import  controlador.Ctrl_funciones;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.JOptionPane;
import modelo.Producto;

/**
 *
 * @author Jean
 */
public class InterProducto extends javax.swing.JInternalFrame {

    int obtenerIdCategoriaCombo = 0;

    public InterProducto() {
        initComponents();
        this.setSize(new Dimension(400, 300));
        this.setTitle("Nuevo Producto");

        this.CargarComboCategorias();
        //this.CargarComboIva();
        
         // Utilizar la función para configurar el JTextField
        Ctrl_funciones.setNumericCommaDot(txt_precio);
        Ctrl_funciones.setNumericOnly(txt_cantidad);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txt_cantidad = new javax.swing.JTextField();
        txt_precio = new javax.swing.JTextField();
        txt_descripcion = new javax.swing.JTextField();
        txt_Nombre = new javax.swing.JTextField();
        jComboBox_categoria = new javax.swing.JComboBox<>();
        jComboBox_iva = new javax.swing.JComboBox<>();
        jButton_Guardar = new javax.swing.JButton();
        jLabel_wallpaper = new javax.swing.JLabel();

        setClosable(true);
        setIconifiable(true);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Nuevo Producto");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 390, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel1.setText("Nombre:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 120, -1));

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Cantidad:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, 120, -1));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel4.setText("Precio:");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 110, 120, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("Descripcion:");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 120, -1));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("IVA:");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 170, 120, -1));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("Categorias:");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 120, -1));
        getContentPane().add(txt_cantidad, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 80, 170, -1));
        getContentPane().add(txt_precio, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 110, 170, -1));
        getContentPane().add(txt_descripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 140, 170, -1));
        getContentPane().add(txt_Nombre, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 50, 170, -1));

        jComboBox_categoria.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_categoria.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Categoria:" }));
        getContentPane().add(jComboBox_categoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 200, 170, -1));

        jComboBox_iva.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jComboBox_iva.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Seleccione Iva:", "No grava iva", "10.5%", "21%", "27%" }));
        jComboBox_iva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox_ivaActionPerformed(evt);
            }
        });
        getContentPane().add(jComboBox_iva, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 170, 170, -1));

        jButton_Guardar.setBackground(new java.awt.Color(0, 204, 204));
        jButton_Guardar.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton_Guardar.setText("Guardar");
        jButton_Guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton_GuardarActionPerformed(evt);
            }
        });
        getContentPane().add(jButton_Guardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 230, 90, 30));

        jLabel_wallpaper.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/fondo3.jpg"))); // NOI18N
        getContentPane().add(jLabel_wallpaper, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 390, 270));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton_GuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton_GuardarActionPerformed

        Producto producto = new Producto();
        Ctrl_Producto controlProducto = new Ctrl_Producto();
        String iva = "";
        String categoria = "";
        iva = jComboBox_iva.getSelectedItem().toString().trim();
        categoria = jComboBox_categoria.getSelectedItem().toString().trim();

        // Validar campos
        if (txt_Nombre.getText().equals("") || txt_cantidad.getText().equals("") || txt_precio.getText().equals("")) {
            JOptionPane.showMessageDialog(null, "Complete todos los campos");
            txt_Nombre.setBackground(new Color(255, 150, 150));
            txt_cantidad.setBackground(new Color(255, 150, 150));
            txt_precio.setBackground(new Color(255, 150, 150));
        } else {
            // Validar selección de IVA y Categoría
            if (iva.equals("Seleccione Iva:")) {
                JOptionPane.showMessageDialog(null, "Seleccione Iva.");
                jComboBox_iva.setBackground(new Color(255, 150, 150));
            } else if (categoria.equals("Seleccione Categoria:")) {
                JOptionPane.showMessageDialog(null, "Seleccione categoría.");
                jComboBox_categoria.setBackground(new Color(255, 150, 150));
            } else {
                // Consulta para ver si el producto ya existe
                if (!controlProducto.existeProducto(txt_Nombre.getText().trim())) {
                    if (iva.equalsIgnoreCase("Seleccione Iva:")) {
                        JOptionPane.showMessageDialog(null, "Seleccione iva.");
                    } else {
                        if (categoria.equalsIgnoreCase("Seleccione categoria:")) {
                            JOptionPane.showMessageDialog(null, "Seleccione categoria.");
                        } else {
                            try {
                                producto.setNombre(txt_Nombre.getText().trim());
                                producto.setCantidad(Integer.parseInt(txt_cantidad.getText().trim()));
                                String precioTXT = "";
                                double Precio = 0.0;
                                precioTXT = txt_precio.getText().trim();
                                boolean aux = false;

                                // si el usuario ingresa , (coma) como punto decimal, lo transforma a punto (.)
                                for (int i = 0; i < precioTXT.length(); i++) {
                                    if (precioTXT.charAt(i) == ',') {
                                        String precioNuevo = precioTXT.replace(",", ".");
                                        Precio = Double.parseDouble(precioNuevo);
                                        aux = true;

                                    }
                                }
                                // Evaluar la condicion 
                                if (aux == true) {
                                    producto.setPrecio(Precio);

                                } else {
                                    Precio = Double.parseDouble(precioTXT);
                                    producto.setPrecio(Precio);

                                }
                                producto.setDescripcion(txt_descripcion.getText().trim());

                                //Porcentaje de IVA
                                if (iva.equalsIgnoreCase("No grava iva")) {
                                    producto.setPorcentajeIva(0);

                                } else if (iva.equalsIgnoreCase("10.5%")) {
                                    producto.setPorcentajeIva(10.5);

                                } else if (iva.equalsIgnoreCase("21%")) {
                                    producto.setPorcentajeIva(21);

                                } else if (iva.equalsIgnoreCase("27%")) {
                                    producto.setPorcentajeIva(27);
                                }

                                // IdCategoria - cargar metodo que obtiene el id de categoria
                                this.IdCategoria();
                                producto.setIdCategoria(obtenerIdCategoriaCombo);
                                producto.setEstado(1);

                                if (controlProducto.guardar(producto)) {
                                    JOptionPane.showMessageDialog(null, "Registro Guardado");
                                    txt_Nombre.setBackground(Color.green);
                                    txt_cantidad.setBackground(Color.green);
                                    txt_precio.setBackground(Color.green);
                                    txt_descripcion.setBackground(Color.green);

                                    this.CargarComboCategorias();
                                    this.jComboBox_iva.setSelectedItem("Seleccione Iva:");
                                    this.Limpiar();
                                } else {
                                    JOptionPane.showMessageDialog(null, "Error al guardar");
                                }

                            } catch (HeadlessException | NumberFormatException e) {
                                System.out.println("Error: " + e);

                            }

                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El producto ya existe en la Base de Datos");
                }
            }
        }


    }//GEN-LAST:event_jButton_GuardarActionPerformed

    private void jComboBox_ivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox_ivaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox_ivaActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton_Guardar;
    private javax.swing.JComboBox<String> jComboBox_categoria;
    private javax.swing.JComboBox<String> jComboBox_iva;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel_wallpaper;
    private javax.swing.JTextField txt_Nombre;
    private javax.swing.JTextField txt_cantidad;
    private javax.swing.JTextField txt_descripcion;
    private javax.swing.JTextField txt_precio;
    // End of variables declaration//GEN-END:variables

    // Método para limpiar campos 
    private void Limpiar() {
        txt_Nombre.setText("");
        txt_cantidad.setText("");
        txt_precio.setText("");
        txt_descripcion.setText("");
    }

    // Método para cargar categorías 
    private void CargarComboCategorias() {
        try ( Connection cn = Conexion.conectar();  Statement st = cn.createStatement();  ResultSet rs = st.executeQuery("SELECT * FROM tb_categoria")) {
            jComboBox_categoria.removeAllItems();
            jComboBox_categoria.addItem("Seleccione Categoria");
            while (rs.next()) {
                jComboBox_categoria.addItem(rs.getString("descripcion"));
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al cargar categorias: " + e.getMessage());
        }
    }

    // Método para obtener id de la categoría
    private int IdCategoria() {
        try ( Connection cn = Conexion.conectar();  Statement st = cn.createStatement();  ResultSet rs = st.executeQuery("SELECT * FROM tb_categoria WHERE descripcion = '" + this.jComboBox_categoria.getSelectedItem() + "'")) {
            while (rs.next()) {
                obtenerIdCategoriaCombo = rs.getInt("idCategoria");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Error al obtener id categoria: " + e.getMessage());
        }
        return obtenerIdCategoriaCombo;
    }

    // Método para obtener el porcentaje de IVA basado en la selección del combo box
    private double obtenerPorcentajeIva(String iva) {
        switch (iva) {
            case "No grava iva":
                return 0.0;
            case "10.5%":
                return 10.5;
            case "21%":
                return 21.0;
            case "27%":
                return 27.0;
            default:
                throw new IllegalArgumentException("Porcentaje de IVA no válido: " + iva);
        }
    }

}
